//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by controller-gen. DO NOT EDIT.

package v1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NetSuccessCondition) DeepCopyInto(out *NetSuccessCondition) {
	*out = *in
	if in.SuccessRate != nil {
		in, out := &in.SuccessRate, &out.SuccessRate
		*out = new(uint64)
		**out = **in
	}
	if in.MeanAccessDelayInMs != nil {
		in, out := &in.MeanAccessDelayInMs, &out.MeanAccessDelayInMs
		*out = new(uint64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NetSuccessCondition.
func (in *NetSuccessCondition) DeepCopy() *NetSuccessCondition {
	if in == nil {
		return nil
	}
	out := new(NetSuccessCondition)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Netdns) DeepCopyInto(out *Netdns) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Netdns.
func (in *Netdns) DeepCopy() *Netdns {
	if in == nil {
		return nil
	}
	out := new(Netdns)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Netdns) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NetdnsList) DeepCopyInto(out *NetdnsList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Netdns, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NetdnsList.
func (in *NetdnsList) DeepCopy() *NetdnsList {
	if in == nil {
		return nil
	}
	out := new(NetdnsList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *NetdnsList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NetdnsRequest) DeepCopyInto(out *NetdnsRequest) {
	*out = *in
	if in.TestIPv4 != nil {
		in, out := &in.TestIPv4, &out.TestIPv4
		*out = new(bool)
		**out = **in
	}
	if in.TestIPv6 != nil {
		in, out := &in.TestIPv6, &out.TestIPv6
		*out = new(bool)
		**out = **in
	}
	if in.DurationInSecond != nil {
		in, out := &in.DurationInSecond, &out.DurationInSecond
		*out = new(uint64)
		**out = **in
	}
	if in.QPS != nil {
		in, out := &in.QPS, &out.QPS
		*out = new(uint64)
		**out = **in
	}
	if in.PerRequestTimeoutInSecond != nil {
		in, out := &in.PerRequestTimeoutInSecond, &out.PerRequestTimeoutInSecond
		*out = new(uint64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NetdnsRequest.
func (in *NetdnsRequest) DeepCopy() *NetdnsRequest {
	if in == nil {
		return nil
	}
	out := new(NetdnsRequest)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NetdnsSpec) DeepCopyInto(out *NetdnsSpec) {
	*out = *in
	if in.Schedule != nil {
		in, out := &in.Schedule, &out.Schedule
		*out = new(SchedulePlan)
		**out = **in
	}
	if in.Request != nil {
		in, out := &in.Request, &out.Request
		*out = new(NetdnsRequest)
		(*in).DeepCopyInto(*out)
	}
	if in.SuccessCondition != nil {
		in, out := &in.SuccessCondition, &out.SuccessCondition
		*out = new(NetSuccessCondition)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NetdnsSpec.
func (in *NetdnsSpec) DeepCopy() *NetdnsSpec {
	if in == nil {
		return nil
	}
	out := new(NetdnsSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Nethttp) DeepCopyInto(out *Nethttp) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Nethttp.
func (in *Nethttp) DeepCopy() *Nethttp {
	if in == nil {
		return nil
	}
	out := new(Nethttp)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Nethttp) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NethttpList) DeepCopyInto(out *NethttpList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Nethttp, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NethttpList.
func (in *NethttpList) DeepCopy() *NethttpList {
	if in == nil {
		return nil
	}
	out := new(NethttpList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *NethttpList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NethttpRequest) DeepCopyInto(out *NethttpRequest) {
	*out = *in
	if in.TestIPv4 != nil {
		in, out := &in.TestIPv4, &out.TestIPv4
		*out = new(bool)
		**out = **in
	}
	if in.TestIPv6 != nil {
		in, out := &in.TestIPv6, &out.TestIPv6
		*out = new(bool)
		**out = **in
	}
	if in.DurationInSecond != nil {
		in, out := &in.DurationInSecond, &out.DurationInSecond
		*out = new(uint64)
		**out = **in
	}
	if in.QPS != nil {
		in, out := &in.QPS, &out.QPS
		*out = new(uint64)
		**out = **in
	}
	if in.PerRequestTimeoutInSecond != nil {
		in, out := &in.PerRequestTimeoutInSecond, &out.PerRequestTimeoutInSecond
		*out = new(uint64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NethttpRequest.
func (in *NethttpRequest) DeepCopy() *NethttpRequest {
	if in == nil {
		return nil
	}
	out := new(NethttpRequest)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NethttpSpec) DeepCopyInto(out *NethttpSpec) {
	*out = *in
	if in.Schedule != nil {
		in, out := &in.Schedule, &out.Schedule
		*out = new(SchedulePlan)
		**out = **in
	}
	if in.Target != nil {
		in, out := &in.Target, &out.Target
		*out = new(NethttpTarget)
		**out = **in
	}
	if in.Request != nil {
		in, out := &in.Request, &out.Request
		*out = new(NethttpRequest)
		(*in).DeepCopyInto(*out)
	}
	if in.SuccessCondition != nil {
		in, out := &in.SuccessCondition, &out.SuccessCondition
		*out = new(NetSuccessCondition)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NethttpSpec.
func (in *NethttpSpec) DeepCopy() *NethttpSpec {
	if in == nil {
		return nil
	}
	out := new(NethttpSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *NethttpTarget) DeepCopyInto(out *NethttpTarget) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new NethttpTarget.
func (in *NethttpTarget) DeepCopy() *NethttpTarget {
	if in == nil {
		return nil
	}
	out := new(NethttpTarget)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SchedulePlan) DeepCopyInto(out *SchedulePlan) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SchedulePlan.
func (in *SchedulePlan) DeepCopy() *SchedulePlan {
	if in == nil {
		return nil
	}
	out := new(SchedulePlan)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StatusHistoryRecord) DeepCopyInto(out *StatusHistoryRecord) {
	*out = *in
	if in.StartTimeStamp != nil {
		in, out := &in.StartTimeStamp, &out.StartTimeStamp
		*out = (*in).DeepCopy()
	}
	if in.FailedAgentNodeList != nil {
		in, out := &in.FailedAgentNodeList, &out.FailedAgentNodeList
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StatusHistoryRecord.
func (in *StatusHistoryRecord) DeepCopy() *StatusHistoryRecord {
	if in == nil {
		return nil
	}
	out := new(StatusHistoryRecord)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TaskStatus) DeepCopyInto(out *TaskStatus) {
	*out = *in
	if in.DoneRound != nil {
		in, out := &in.DoneRound, &out.DoneRound
		*out = new(int64)
		**out = **in
	}
	if in.LastRoundFinishTimeStamp != nil {
		in, out := &in.LastRoundFinishTimeStamp, &out.LastRoundFinishTimeStamp
		*out = (*in).DeepCopy()
	}
	if in.LastRoundStatus != nil {
		in, out := &in.LastRoundStatus, &out.LastRoundStatus
		*out = new(string)
		**out = **in
	}
	if in.NextRoundStartTimeStamp != nil {
		in, out := &in.NextRoundStartTimeStamp, &out.NextRoundStartTimeStamp
		*out = (*in).DeepCopy()
	}
	if in.NextRoundDeadLineTimeStamp != nil {
		in, out := &in.NextRoundDeadLineTimeStamp, &out.NextRoundDeadLineTimeStamp
		*out = (*in).DeepCopy()
	}
	if in.History != nil {
		in, out := &in.History, &out.History
		*out = make([]StatusHistoryRecord, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TaskStatus.
func (in *TaskStatus) DeepCopy() *TaskStatus {
	if in == nil {
		return nil
	}
	out := new(TaskStatus)
	in.DeepCopyInto(out)
	return out
}
