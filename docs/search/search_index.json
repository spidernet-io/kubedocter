{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"develop/crd/","title":"develop new crd","text":"<ol> <li> <p>define CRD in pkg/k8s/apis/spiderdoctor.spidernet.io/v1/xx_types.go    add role to pkg/k8s/apis/spiderdoctor.spidernet.io/v1/rbac.go</p> </li> <li> <p>make update_openapi_sdk</p> </li> <li> <p>add crd to MutatingWebhookConfiguration and ValidatingWebhookConfiguration in charts/templates/tls.yaml </p> </li> <li> <p>add your crd to charts/template/role.yaml</p> </li> <li> <p>implement the interface pkg/pluginManager/types in pkg/plugins/xxxx    register your interface in pkg/pluginManager/types/manager.go</p> </li> </ol> <p>the plugin manager will auto help plugins to finish following jobs:</p> <ol> <li> <p>schedule task and call plugin to implement each round task</p> </li> <li> <p>collect all report and save to controller disc</p> </li> <li> <p>summarize each round result and update to CRD</p> </li> </ol>"},{"location":"develop/dev/","title":"develop","text":""},{"location":"develop/dev/#local-develop","title":"local develop","text":"<ol> <li> <p><code>make build_local_image</code></p> </li> <li> <p><code>make e2e_init</code></p> </li> <li> <p><code>make e2e_run</code></p> </li> <li> <p>check proscope, browser vists http://NodeIP:4040</p> </li> <li> <p>apply cr</p> <pre><code>cat &lt;&lt;EOF &gt; mybook.yaml\napiVersion: spiderdoctor.spidernet.io/v1\nkind: Mybook\nmetadata:\n  name: test\nspec:\n  ipVersion: 4\n  subnet: \"1.0.0.0/8\"\nEOF\nkubectl apply -f mybook.yaml\n</code></pre> </li> </ol>"},{"location":"develop/dev/#chart-develop","title":"chart develop","text":"<p>helm repo add rock https://spidernet-io.github.io/spiderdoctor/</p>"},{"location":"reference/arch/","title":"architecture","text":"<p>The spiderdoctor is aimed to test the cluster and generate task reports to check whether the cluster is healthy.</p> <p>It consists of controller deployment and agent daemonset.</p> <ul> <li> <p>the controller schedules the task, update and summarize the task result, and aggerate all reports.</p> </li> <li> <p>the agent implement tasks</p> </li> </ul>"},{"location":"reference/report/","title":"Report","text":""},{"location":"reference/report/#agent-report","title":"agent report","text":"<p>When agent finish task, it saves report to '/report' with name fmt.Sprintf(\"%s_%s_round%d_%s_%s\", kindName, taskName, roundNumber, nodeName, suffix). the report will be automatically deleted with age 'spec.schedulePlan.TimeoutMinute + 5 ' minutes. In this interval ,  the controller pod will collect this report and save to '/report' of controller pod</p>"},{"location":"reference/report/#controller-report","title":"controller report","text":"<p>when task finishes, it saves report to '/report' with name fmt.Sprintf(\"%s_%s_round%d_%s_%s\", kindName, taskName, roundNumber, nodeName, suffix). It also collects all agent report and  saves report to '/report'. All files in '/report' of controller will sevive with max age maxAgeInDay(default 30 days). It could be adjusted in the configmap</p> <p>the controller could save reports to host path or PVC</p>"},{"location":"usage/install/","title":"install","text":""},{"location":"usage/install/#production-env","title":"production env","text":""},{"location":"usage/install/#poc-or-e2e-environment","title":"POC or E2E environment","text":"<p>when POC or E2E case, it could disable the controller to collect reports, so no need to install strogeClass.</p> <p>the following method leads the agent just print report to console</p> <pre><code>helm repo add spiderdoctor https://spidernet-io.github.io/spiderdoctor\n\nhelm install spiderdoctor spiderdoctor/spiderdoctor \\\n    -n kube-system --wait --debug \\\n    --set feature.enableIPv4=true --set feature.enableIPv6=true \\\n    --set feature.aggregateReport.enabled=false\n</code></pre> <p>the following method leads controller collects all report to disc of local host. BTW, when the spiderdoctor controller is schedules to other nodes, the historical reports will be not migrated </p> <pre><code>helm repo add spiderdoctor https://spidernet-io.github.io/spiderdoctor\n\nhelm  install spiderdoctor spiderdoctor/spiderdoctor \\\n    -n kube-system --wait --debug \\\n    --set feature.enableIPv4=true --set feature.enableIPv6=true \\\n    --set feature.aggregateReport.enabled=true \\\n    --set feature.aggregateReport.controller.reportHostPath=\"/var/run/spiderdoctor/controller\"\n</code></pre>"},{"location":"usage/install/#production-environment","title":"production environment","text":"<p>the following method leads the spiderdoctor controller collect report to stroage, so firstly, it should install storageClass</p> <pre><code>helm repo add spiderdoctor https://spidernet-io.github.io/spiderdoctor\n\nhelm  install spiderdoctor spiderdoctor/spiderdoctor \\\n    -n kube-system --wait --debug \\\n    --set feature.enableIPv4=true --set feature.enableIPv6=true \\\n    --set feature.aggregateReport.enabled=true \\\n    --set feature.aggregateReport.controller.pvc.enabled=true \\\n    --set feature.aggregateReport.controller.pvc.storageClass=local \\\n    --set feature.aggregateReport.controller.pvc.storageRequests=\"100Mi\" \\\n    --set feature.aggregateReport.controller.pvc.storageLimits=\"500Mi\"\n</code></pre>"},{"location":"usage/install/#multus-environment","title":"multus environment","text":"<p>if it is required to test all interface of agent pod, it should annotate the agent with multus annotation</p> <pre><code>helm repo add spiderdoctor https://spidernet-io.github.io/spiderdoctor\n\n# replace following with actual multus configuration\nMULTUS_DEFAULT_CNI=kube-system/k8s-pod-network\nMULTUS_ADDITIONAL_CNI=kube-system/macvlan\n\nhelm install spiderdoctor spiderdoctor/spiderdoctor \\\n    -n kube-system --wait --debug \\\n    --set feature.enableIPv4=true --set feature.enableIPv6=true \\\n    --set feature.aggregateReport.enabled=false \\\n    --set spiderdoctorAgent.podAnnotations.v1\\.multus-cni\\.io/default-network=${MULTUS_DEFAULT_CNI} \\\n    --set spiderdoctorAgent.podAnnotations.k8s\\.v1\\.cni\\.cncf\\.io/networks=${MULTUS_ADDITIONAL_CNI}\n\n</code></pre>"},{"location":"usage/netdns/","title":"netdns","text":"<pre><code>\ncat &lt;&lt;EOF &gt; netdns1.yaml\napiVersion: spiderdoctor.spidernet.io/v1\nkind: Netdns\nmetadata:\n  name: testdns1\nspec:\n  schedule:\n    startAfterMinute: 10\n    roundNumber: 1\n    intervalMinute: 60\n    timeoutMinute: 10\n  request:\n    testIPv4: true\n    testIPv6: true\n    durationInSecond: 10\n    qps: 10\n    perRequestTimeoutInMS: 500\n  success:\n    successRate: 1\n    meanAccessDelayInMs: 1000\nEOF\n\nkubectl apply -f netdns1.yaml\n\n</code></pre>"},{"location":"usage/nethttp/","title":"Nethttp","text":""},{"location":"usage/nethttp/#concept","title":"concept","text":"<p>Fo this kind task, each spiderdoctor agent will send http request to specified target, and get success rate and mean delay.  It could specify success condition to tell the result succeed or fail.  And, more detailed report will print to spiderdoctor agent stdout, or save to disc by spiderdoctor controller.</p> <p>the following is the spec of nethttp</p> <pre><code>apiVersion: v1\nitems:\n- apiVersion: spiderdoctor.spidernet.io/v1\n  kind: Nethttp\n  metadata:\n    generation: 1\n    name: testhttp1\n  spec:\n    schedule:\n      intervalMinute: 2\n      roundNumber: 2\n      startAfterMinute: 0\n      timeoutMinute: 1\n      sourceAgentNodeSelector:\n        matchExpressions:\n          - { key: \"kubernetes.io/hostname\", operator: In, values: [\"spiderdoctor-worker\"] }\n    request:\n      durationInSecond: 5\n      perRequestTimeoutInMS: 1000\n      qps: 10\n    target:\n      targetUser:\n        method: GET\n        url: http://172.80.1.2\n      targetPod:\n        podLabelSelector:\n          matchExpressions:\n            - { key: \"app\", operator: In, values: [\"http-server\"] }\n        httpPort: 80\n        method: GET\n        testIPv4: true\n        testIPv6: true\n        testMultusInterface: false\n      targetAgent:\n        testClusterIp: true\n        testEndpoint: true\n        testIPv4: true\n        testIPv6: true\n        testIngress: false\n        testMultusInterface: false\n        testNodePort: true\n    success:\n      meanAccessDelayInMs: 10000\n      successRate: 1\n  status:\n    doneRound: 1\n    expectedRound: 2\n    finish: false\n    lastRoundStatus: succeed\n    history:\n    - deadLineTimeStamp: \"2022-11-21T06:19:53Z\"\n      duration: 10.117152806s\n      startTimeStamp: \"2022-11-21T06:18:53Z\"\n      endTimeStamp: \"2022-11-21T06:19:03Z\"\n      failedAgentNodeList: []\n      notReportAgentNodeList: []\n      roundNumber: 2\n      status: notstarted\n      succeedAgentNodeList: []\n</code></pre> <ul> <li> <p>spec.schedule: set how to schedule the task.</p> <p>roundNumber: how many rounds it should be to run this task</p> <p>intervalMinute:  the time interval in minute, for run each round for this task</p> <p>startAfterMinute: when the start the first round</p> <p>timeoutMinute: the timeout in minute for each round, when the rask does not finish in time, it results to be failuire</p> <p>sourceAgentNodeSelector [optional]: set the node label selector, then, the spiderdoctor agent who locates on these nodes will implement the task. If not set this field, all spiderdoctor agent will execute the task</p> </li> <li> <p>spec.request: how each spiderdoctor agent should send the http request</p> <p>durationInSecond: for each round, the duration in second how long the http request lasts</p> <p>perRequestTimeoutInMS: timeout in ms for each http request </p> <p>qps: qps</p> </li> <li> <p>spec.target: set the target of http request. it could not set targetUser and targetAgent at the same time</p> <p>targetUser [optional]: set an user-defined URL for the http request</p> <pre><code>url: the url for http\n\nmethod: http method, must be one of GET POST PUT DELETE CONNECT OPTIONS PATCH HEAD\n</code></pre> <p>targetPod: [optional]: set pods for the http request</p> <pre><code>podLabelSelector: select the target pods\n\nhttpPort: http port\n\nmethod: http method\n\ntestIPv4: test any IPv4 address. Notice, the 'enableIPv4' in configmap  spiderdocter must be enabled\n\ntestIPv6: test any IPv6 address. Notice, the 'enableIPv6' in configmap  spiderdocter must be enabled\n\ntestMultusInterface: whether send http request to all interfaces ip.\n</code></pre> <p>targetAgent: [optional]: set the http tareget to spiderdoctor agents</p> <pre><code>testClusterIp: send http request to the cluster ipv4 or ipv6 address of spiderdoctor agnent, according to testIPv4 and testIPv6.\n\ntestEndpoint: send http request to other spiderdoctor agnent ipv4 or ipv6 address according to testIPv4 and testIPv6.\n\ntestMultusInterface: whether send http request to all interfaces ip in testEndpoint case.\n\ntestIPv4: test any IPv4 address. Notice, the 'enableIPv4' in configmap  spiderdocter must be enabled\n\ntestIPv6: test any IPv6 address. Notice, the 'enableIPv6' in configmap  spiderdocter must be enabled\n\ntestIngress: send http request to the ingress ipv4 or ipv6 address of spiderdoctor agnent\n\ntestNodePort: send http request to the nodePort ipv4 or ipv6 address with each local node of spiderdoctor agnent , according to testIPv4 and testIPv6.\n\n&gt;notice: when test targetAgent case, it will send http request to all targets at the same time with spec.request.qps for each one. That meaning, the actually QPS may be bigger than spec.request.qps\n</code></pre> </li> <li> <p>spec.success: define the success condition of the task result </p> <p>meanAccessDelayInMs: mean access delay in MS, if the actual delay is bigger than this, it results to be failure</p> <p>successRate: the success rate of all http requests. Notice, when a http response code is &gt;=200 and &lt; 400, it's treated as success. if the actual whole success rate is smaller than successRate, the task results to be failure</p> </li> <li> <p>status: the status of the task     doneRound: how many rounds have finished</p> <p>expectedRound: how many rounds the task expect</p> <p>finish: whether all rounds of this task have finished</p> <p>lastRoundStatus: the result of last round</p> <p>history:     roundNumber: the round number</p> <pre><code>status: the status of this round\n\nstartTimeStamp: when this round begins\n\nendTimeStamp: when this round finally finished\n\nduration: how long the round spent\n\ndeadLineTimeStamp: the time deadline of a round\n\nfailedAgentNodeList: the node list where failed spiderdoctor agent locate\n\nnotReportAgentNodeList: the node list where uknown spiderdoctor agent locate. This means these agents have problems.\n\nsucceedAgentNodeList: the node list where successful spiderdoctor agent locate\n</code></pre> </li> </ul>"},{"location":"usage/nethttp/#example","title":"example","text":"<p>a quick task to test spiderdoctor agent, to verify the whole network is ok, each agent could reach each other</p> <pre><code>\ncat &lt;&lt;EOF &gt; nethttp-test-agent.yaml\napiVersion: spiderdoctor.spidernet.io/v1\nkind: Nethttp\nmetadata:\n  name: test-agent\nspec:\n  schedule:\n    startAfterMinute: 0\n    roundNumber: 2\n    intervalMinute: 2\n    timeoutMinute: 1\n  request:\n    durationInSecond: 2\n    qps: 2\n    perRequestTimeoutInMS: 1000\n  success:\n    successRate: 1\n    meanAccessDelayInMs: 10000\nEOF\nkubectl apply -f nethttp-test-agent.yaml\n\n</code></pre> <p>a detail task to test spiderdoctor agent</p> <pre><code>cat &lt;&lt;EOF &gt; test-detail-agent.yaml\napiVersion: spiderdoctor.spidernet.io/v1\nkind: Nethttp\nmetadata:\n  name: test-detail-agent\nspec:\n  schedule:\n    startAfterMinute: 0\n    roundNumber: 2\n    intervalMinute: 2\n    timeoutMinute: 1\n  target:\n    targetAgent:\n      testIPv4: true\n      testIPv6: true\n      testEndpoint: true\n      testMultusInterface: true\n      testClusterIp: true\n      testNodePort: true\n      testLoadBalancer: true\n      testIngress: true\n  request:\n    durationInSecond: 2\n    qps: 2\n    perRequestTimeoutInMS: 1000\n  success:\n    successRate: 1\n    meanAccessDelayInMs: 10000\nEOF\nkubectl apply -f test-detail-agent.yaml\n\n</code></pre> <p>test custom URL</p> <pre><code>\ncat &lt;&lt;EOF &gt; test-custom.yaml\napiVersion: spiderdoctor.spidernet.io/v1\nkind: Nethttp\nmetadata:\n  name: test-custom\nspec:\n  schedule:\n    startAfterMinute: 0\n    roundNumber: 2\n    intervalMinute: 2\n    timeoutMinute: 1\n  target:\n    targetUser:\n      url: \"http://172.80.1.2\"\n      method: \"GET\"\n  request:\n    durationInSecond: 10\n    qps: 10\n    perRequestTimeoutInMS: 1000\n  success:\n    successRate: 1\n    meanAccessDelayInMs: 5000\nEOF\nkubectl apply -f test-custom.yaml\n\n</code></pre> <p>use the spicified spiderdoctor agents to send the http request</p> <pre><code>\ncat &lt;&lt;EOF &gt; source-agent.yaml\napiVersion: spiderdoctor.spidernet.io/v1\nkind: Nethttp\nmetadata:\n  name: source-agent\nspec:\n  schedule:\n    startAfterMinute: 0\n    roundNumber: 2\n    intervalMinute: 2\n    timeoutMinute: 1\n    sourceAgentNodeSelector:\n        matchExpressions:\n          - { key: \"kubernetes.io/hostname\", operator: In, values: [\"spiderdoctor-worker\"] }\n  target:\n    targetUser:\n      url: \"http://172.80.1.2\"\n      method: \"GET\"\n  request:\n    durationInSecond: 10\n    qps: 10\n    perRequestTimeoutInMS: 1000\n  success:\n    successRate: 1\n    meanAccessDelayInMs: 1000\nEOF\nkubectl apply -f source-agent.yaml\n\n</code></pre> <p>test pod</p> <pre><code>cat &lt;&lt;EOF &gt; test-pod.yaml\napiVersion: spiderdoctor.spidernet.io/v1\nkind: Nethttp\nmetadata:\n  name: test-pod\nspec:\n  schedule:\n    startAfterMinute: 0\n    roundNumber: 2\n    intervalMinute: 2\n    timeoutMinute: 1\n  target:\n    targetPod:\n      podLabelSelector:\n          matchExpressions:\n            - { key: \"app\", operator: In, values: [\"test\"] }\n      method: \"GET\"\n      httpPort: 80\n      testIPv4: true\n      testIPv6: true\n      testMultusInterface: true\n  request:\n    durationInSecond: 2\n    qps: 2\n    perRequestTimeoutInMS: 1000\n  success:\n    successRate: 1\n    meanAccessDelayInMs: 10000\nEOF\nkubectl apply -f test-pod.yaml\n\n</code></pre>"},{"location":"usage/nethttp/#debug","title":"debug","text":"<p>when something wrong happen, see the log for your task with following command</p> <pre><code>#get log \nCRD_KIND=\"nethttp\"\nCRD_NAME=\"test1\"\nkubectl logs -n kube-system  spiderdoctor-agent-v4vzx | grep -i \"${CRD_KIND}.${CRD_NAME}\"\n\n</code></pre>"},{"location":"usage/nethttp/#report","title":"report","text":"<p>when the spiderdoctor is not enabled to aggerate reports, all reports will be printed in the stdout of spiderdoctor agent. Use the following command to get its report</p> <pre><code>kubectl logs -n kube-system  spiderdoctor-agent-v4vzx | jq 'select( .TaskName==\"nethttp.testhttp1\" )'\n</code></pre> <p>when the spiderdoctor is enabled to aggregate reports, all reports will be collected in the PVC or hostPath of spiderdoctor controller.</p> <p>metric introduction</p> <pre><code>\n        \"Metrics\": {\n          \"latencies\": {\n            \"total\": 27964545,\n            \"mean\": 2796454,\n            \"50th\": 2821970,\n            \"90th\": 3102803,\n            \"95th\": 3188759,\n            \"99th\": 3188759,\n            \"max\": 3188759,\n            \"min\": 2362429\n          },\n          \"bytes_in\": {\n            \"total\": 2357,\n            \"mean\": 235.7\n          },\n          \"bytes_out\": {\n            \"total\": 0,\n            \"mean\": 0\n          },\n          \"earliest\": \"2022-11-18T04:55:20.22108713Z\",\n          \"latest\": \"2022-11-18T04:55:24.721276724Z\",\n          \"end\": \"2022-11-18T04:55:24.723858358Z\",\n          \"duration\": 4500189594,\n          \"wait\": 2581634, # Wait is the extra time waiting for responses from targets.\n          \"requests\": 10, #the total number of requests executed\n          \"rate\": 2.222128599500068, #Rate is the rate of sent requests per second.\n          \"throughput\": 2.220854556815161, #Throughput is the rate of successful requests per second.\n          \"success\": 1, #percentage of non-error responses\n          \"status_codes\": {\n            \"200\": 10\n          },\n          \"errors\": []\n        }\n</code></pre>"}]}