{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"develop/crd/","text":"develop new crd define CRD in pkg/k8s/apis/spiderdoctor.spidernet.io/v1/xx_types.go add role to pkg/k8s/apis/spiderdoctor.spidernet.io/v1/rbac.go make update_openapi_sdk add crd to MutatingWebhookConfiguration and ValidatingWebhookConfiguration in charts/templates/tls.yaml add your crd to charts/template/role.yaml implement the interface pkg/pluginManager/types in pkg/plugins/xxxx register your interface in pkg/pluginManager/types/manager.go the plugin manager will auto help plugins to finish following jobs: schedule task and call plugin to implement each round task collect all report and save to controller disc summarize each round result and update to CRD","title":"develop new crd"},{"location":"develop/crd/#develop-new-crd","text":"define CRD in pkg/k8s/apis/spiderdoctor.spidernet.io/v1/xx_types.go add role to pkg/k8s/apis/spiderdoctor.spidernet.io/v1/rbac.go make update_openapi_sdk add crd to MutatingWebhookConfiguration and ValidatingWebhookConfiguration in charts/templates/tls.yaml add your crd to charts/template/role.yaml implement the interface pkg/pluginManager/types in pkg/plugins/xxxx register your interface in pkg/pluginManager/types/manager.go the plugin manager will auto help plugins to finish following jobs: schedule task and call plugin to implement each round task collect all report and save to controller disc summarize each round result and update to CRD","title":"develop new crd"},{"location":"develop/dev/","text":"develop local develop make build_local_image make e2e_init make e2e_run check proscope, browser vists http://NodeIP:4040 apply cr cat <<EOF > mybook.yaml apiVersion: spiderdoctor.spidernet.io/v1 kind: Mybook metadata: name: test spec: ipVersion: 4 subnet: \"1.0.0.0/8\" EOF kubectl apply -f mybook.yaml chart develop helm repo add rock https://spidernet-io.github.io/spiderdoctor/","title":"develop"},{"location":"develop/dev/#develop","text":"","title":"develop"},{"location":"develop/dev/#local-develop","text":"make build_local_image make e2e_init make e2e_run check proscope, browser vists http://NodeIP:4040 apply cr cat <<EOF > mybook.yaml apiVersion: spiderdoctor.spidernet.io/v1 kind: Mybook metadata: name: test spec: ipVersion: 4 subnet: \"1.0.0.0/8\" EOF kubectl apply -f mybook.yaml","title":"local develop"},{"location":"develop/dev/#chart-develop","text":"helm repo add rock https://spidernet-io.github.io/spiderdoctor/","title":"chart develop"},{"location":"reference/arch/","text":"architecture The spiderdoctor is aimed to test the cluster and generate task reports to check whether the cluster is healthy. It consists of controller deployment and agent daemonset. the controller schedules the task, update and summarize the task result, and aggerate all reports. the agent implement tasks","title":"architecture"},{"location":"reference/arch/#architecture","text":"The spiderdoctor is aimed to test the cluster and generate task reports to check whether the cluster is healthy. It consists of controller deployment and agent daemonset. the controller schedules the task, update and summarize the task result, and aggerate all reports. the agent implement tasks","title":"architecture"},{"location":"reference/report/","text":"agent report When agent finish task, it saves report to '/report' with name fmt.Sprintf(\"%s_%s_round%d_%s_%s\", kindName, taskName, roundNumber, nodeName, suffix). the report will be automatically deleted with age 'spec.schedulePlan.TimeoutMinute + 5 ' minutes. In this interval , the controller pod will collect this report and save to '/report' of controller pod controller report when task finishes, it saves report to '/report' with name fmt.Sprintf(\"%s_%s_round%d_%s_%s\", kindName, taskName, roundNumber, nodeName, suffix). It also collects all agent report and saves report to '/report'. All files in '/report' of controller will sevive with max age maxAgeInDay(default 30 days). It could be adjusted in the configmap the controller could save reports to host path or PVC","title":"Report"},{"location":"reference/report/#_1","text":"","title":""},{"location":"reference/report/#agent-report","text":"When agent finish task, it saves report to '/report' with name fmt.Sprintf(\"%s_%s_round%d_%s_%s\", kindName, taskName, roundNumber, nodeName, suffix). the report will be automatically deleted with age 'spec.schedulePlan.TimeoutMinute + 5 ' minutes. In this interval , the controller pod will collect this report and save to '/report' of controller pod","title":"agent report"},{"location":"reference/report/#controller-report","text":"when task finishes, it saves report to '/report' with name fmt.Sprintf(\"%s_%s_round%d_%s_%s\", kindName, taskName, roundNumber, nodeName, suffix). It also collects all agent report and saves report to '/report'. All files in '/report' of controller will sevive with max age maxAgeInDay(default 30 days). It could be adjusted in the configmap the controller could save reports to host path or PVC","title":"controller report"},{"location":"usage/install/","text":"install production env POC or E2E environment when POC or E2E case, it could disable the controller to collect reports, so no need to install strogeClass. the following method leads the agent just print report to console helm repo add spiderdoctor https://spidernet-io.github.io/spiderdoctor helm install spiderdoctor spiderdoctor/spiderdoctor \\ -n kube-system --wait --debug \\ --set feature.enableIPv4=true --set feature.enableIPv6=true \\ --set feature.aggregateReport.enabled=false the following method leads controller collects all report to disc of local host. BTW, when the spiderdoctor controller is schedules to other nodes, the historical reports will be not migrated helm repo add spiderdoctor https://spidernet-io.github.io/spiderdoctor helm install spiderdoctor spiderdoctor/spiderdoctor \\ -n kube-system --wait --debug \\ --set feature.enableIPv4=true --set feature.enableIPv6=true \\ --set feature.aggregateReport.enabled=true \\ --set feature.aggregateReport.controller.reportHostPath=\"/var/run/spiderdoctor/controller\" production environment the following method leads the spiderdoctor controller collect report to stroage, so firstly, it should install storageClass helm repo add spiderdoctor https://spidernet-io.github.io/spiderdoctor helm install spiderdoctor spiderdoctor/spiderdoctor \\ -n kube-system --wait --debug \\ --set feature.enableIPv4=true --set feature.enableIPv6=true \\ --set feature.aggregateReport.enabled=true \\ --set feature.aggregateReport.controller.pvc.enabled=true \\ --set feature.aggregateReport.controller.pvc.storageClass=local \\ --set feature.aggregateReport.controller.pvc.storageRequests=\"100Mi\" \\ --set feature.aggregateReport.controller.pvc.storageLimits=\"500Mi\" multus environment if it is required to test all interface of agent pod, it should annotate the agent with multus annotation helm repo add spiderdoctor https://spidernet-io.github.io/spiderdoctor # replace following with actual multus configuration MULTUS_DEFAULT_CNI=kube-system/k8s-pod-network MULTUS_ADDITIONAL_CNI=kube-system/macvlan helm install spiderdoctor spiderdoctor/spiderdoctor \\ -n kube-system --wait --debug \\ --set feature.enableIPv4=true --set feature.enableIPv6=true \\ --set feature.aggregateReport.enabled=false \\ --set spiderdoctorAgent.podAnnotations.v1\\.multus-cni\\.io/default-network=${MULTUS_DEFAULT_CNI} \\ --set spiderdoctorAgent.podAnnotations.k8s\\.v1\\.cni\\.cncf\\.io/networks=${MULTUS_ADDITIONAL_CNI}","title":"install"},{"location":"usage/install/#install","text":"","title":"install"},{"location":"usage/install/#production-env","text":"","title":"production env"},{"location":"usage/install/#poc-or-e2e-environment","text":"when POC or E2E case, it could disable the controller to collect reports, so no need to install strogeClass. the following method leads the agent just print report to console helm repo add spiderdoctor https://spidernet-io.github.io/spiderdoctor helm install spiderdoctor spiderdoctor/spiderdoctor \\ -n kube-system --wait --debug \\ --set feature.enableIPv4=true --set feature.enableIPv6=true \\ --set feature.aggregateReport.enabled=false the following method leads controller collects all report to disc of local host. BTW, when the spiderdoctor controller is schedules to other nodes, the historical reports will be not migrated helm repo add spiderdoctor https://spidernet-io.github.io/spiderdoctor helm install spiderdoctor spiderdoctor/spiderdoctor \\ -n kube-system --wait --debug \\ --set feature.enableIPv4=true --set feature.enableIPv6=true \\ --set feature.aggregateReport.enabled=true \\ --set feature.aggregateReport.controller.reportHostPath=\"/var/run/spiderdoctor/controller\"","title":"POC or E2E environment"},{"location":"usage/install/#production-environment","text":"the following method leads the spiderdoctor controller collect report to stroage, so firstly, it should install storageClass helm repo add spiderdoctor https://spidernet-io.github.io/spiderdoctor helm install spiderdoctor spiderdoctor/spiderdoctor \\ -n kube-system --wait --debug \\ --set feature.enableIPv4=true --set feature.enableIPv6=true \\ --set feature.aggregateReport.enabled=true \\ --set feature.aggregateReport.controller.pvc.enabled=true \\ --set feature.aggregateReport.controller.pvc.storageClass=local \\ --set feature.aggregateReport.controller.pvc.storageRequests=\"100Mi\" \\ --set feature.aggregateReport.controller.pvc.storageLimits=\"500Mi\"","title":"production environment"},{"location":"usage/install/#multus-environment","text":"if it is required to test all interface of agent pod, it should annotate the agent with multus annotation helm repo add spiderdoctor https://spidernet-io.github.io/spiderdoctor # replace following with actual multus configuration MULTUS_DEFAULT_CNI=kube-system/k8s-pod-network MULTUS_ADDITIONAL_CNI=kube-system/macvlan helm install spiderdoctor spiderdoctor/spiderdoctor \\ -n kube-system --wait --debug \\ --set feature.enableIPv4=true --set feature.enableIPv6=true \\ --set feature.aggregateReport.enabled=false \\ --set spiderdoctorAgent.podAnnotations.v1\\.multus-cni\\.io/default-network=${MULTUS_DEFAULT_CNI} \\ --set spiderdoctorAgent.podAnnotations.k8s\\.v1\\.cni\\.cncf\\.io/networks=${MULTUS_ADDITIONAL_CNI}","title":"multus environment"},{"location":"usage/netdns/","text":"netdns cat <<EOF > netdns1.yaml apiVersion: spiderdoctor.spidernet.io/v1 kind: Netdns metadata: name: testdns1 spec: schedule: startAfterMinute: 10 roundNumber: 1 intervalMinute: 60 timeoutMinute: 10 request: testIPv4: true testIPv6: true durationInSecond: 10 qps: 10 perRequestTimeoutInMS: 500 success: successRate: 1 meanAccessDelayInMs: 1000 EOF kubectl apply -f netdns1.yaml","title":"netdns"},{"location":"usage/netdns/#netdns","text":"cat <<EOF > netdns1.yaml apiVersion: spiderdoctor.spidernet.io/v1 kind: Netdns metadata: name: testdns1 spec: schedule: startAfterMinute: 10 roundNumber: 1 intervalMinute: 60 timeoutMinute: 10 request: testIPv4: true testIPv6: true durationInSecond: 10 qps: 10 perRequestTimeoutInMS: 500 success: successRate: 1 meanAccessDelayInMs: 1000 EOF kubectl apply -f netdns1.yaml","title":"netdns"},{"location":"usage/nethttp/","text":"Nethttp concept Fo this kind task, each spiderdoctor agent will send http request to specified target, and get success rate and mean delay. It could specify success condition to tell the result succeed or fail. And, more detailed report will print to spiderdoctor agent stdout, or save to disc by spiderdoctor controller. the following is the spec of nethttp apiVersion: v1 items: - apiVersion: spiderdoctor.spidernet.io/v1 kind: Nethttp metadata: generation: 1 name: testhttp1 spec: schedule: intervalMinute: 2 roundNumber: 2 startAfterMinute: 0 timeoutMinute: 1 sourceAgentNodeSelector: matchExpressions: - { key: \"kubernetes.io/hostname\", operator: In, values: [\"spiderdoctor-worker\"] } request: durationInSecond: 5 perRequestTimeoutInMS: 1000 qps: 10 target: targetUser: method: GET url: http://172.80.1.2 targetPod: podLabelSelector: matchExpressions: - { key: \"app\", operator: In, values: [\"http-server\"] } httpPort: 80 method: GET testIPv4: true testIPv6: true testMultusInterface: false targetAgent: testClusterIp: true testEndpoint: true testIPv4: true testIPv6: true testIngress: false testMultusInterface: false testNodePort: true success: meanAccessDelayInMs: 10000 successRate: 1 status: doneRound: 1 expectedRound: 2 finish: false lastRoundStatus: succeed history: - deadLineTimeStamp: \"2022-11-21T06:19:53Z\" duration: 10.117152806s startTimeStamp: \"2022-11-21T06:18:53Z\" endTimeStamp: \"2022-11-21T06:19:03Z\" failedAgentNodeList: [] notReportAgentNodeList: [] roundNumber: 2 status: notstarted succeedAgentNodeList: [] spec.schedule: set how to schedule the task. roundNumber: how many rounds it should be to run this task intervalMinute: the time interval in minute, for run each round for this task startAfterMinute: when the start the first round timeoutMinute: the timeout in minute for each round, when the rask does not finish in time, it results to be failuire sourceAgentNodeSelector [optional]: set the node label selector, then, the spiderdoctor agent who locates on these nodes will implement the task. If not set this field, all spiderdoctor agent will execute the task spec.request: how each spiderdoctor agent should send the http request durationInSecond: for each round, the duration in second how long the http request lasts perRequestTimeoutInMS: timeout in ms for each http request qps: qps spec.target: set the target of http request. it could not set targetUser and targetAgent at the same time targetUser [optional]: set an user-defined URL for the http request url: the url for http method: http method, must be one of GET POST PUT DELETE CONNECT OPTIONS PATCH HEAD targetPod: [optional]: set pods for the http request podLabelSelector: select the target pods httpPort: http port method: http method testIPv4: test any IPv4 address. Notice, the 'enableIPv4' in configmap spiderdocter must be enabled testIPv6: test any IPv6 address. Notice, the 'enableIPv6' in configmap spiderdocter must be enabled testMultusInterface: whether send http request to all interfaces ip. targetAgent: [optional]: set the http tareget to spiderdoctor agents testClusterIp: send http request to the cluster ipv4 or ipv6 address of spiderdoctor agnent, according to testIPv4 and testIPv6. testEndpoint: send http request to other spiderdoctor agnent ipv4 or ipv6 address according to testIPv4 and testIPv6. testMultusInterface: whether send http request to all interfaces ip in testEndpoint case. testIPv4: test any IPv4 address. Notice, the 'enableIPv4' in configmap spiderdocter must be enabled testIPv6: test any IPv6 address. Notice, the 'enableIPv6' in configmap spiderdocter must be enabled testIngress: send http request to the ingress ipv4 or ipv6 address of spiderdoctor agnent testNodePort: send http request to the nodePort ipv4 or ipv6 address with each local node of spiderdoctor agnent , according to testIPv4 and testIPv6. >notice: when test targetAgent case, it will send http request to all targets at the same time with spec.request.qps for each one. That meaning, the actually QPS may be bigger than spec.request.qps spec.success: define the success condition of the task result meanAccessDelayInMs: mean access delay in MS, if the actual delay is bigger than this, it results to be failure successRate: the success rate of all http requests. Notice, when a http response code is >=200 and < 400, it's treated as success. if the actual whole success rate is smaller than successRate, the task results to be failure status: the status of the task doneRound: how many rounds have finished expectedRound: how many rounds the task expect finish: whether all rounds of this task have finished lastRoundStatus: the result of last round history: roundNumber: the round number status: the status of this round startTimeStamp: when this round begins endTimeStamp: when this round finally finished duration: how long the round spent deadLineTimeStamp: the time deadline of a round failedAgentNodeList: the node list where failed spiderdoctor agent locate notReportAgentNodeList: the node list where uknown spiderdoctor agent locate. This means these agents have problems. succeedAgentNodeList: the node list where successful spiderdoctor agent locate example a quick task to test spiderdoctor agent, to verify the whole network is ok, each agent could reach each other cat <<EOF > nethttp-test-agent.yaml apiVersion: spiderdoctor.spidernet.io/v1 kind: Nethttp metadata: name: test-agent spec: schedule: startAfterMinute: 0 roundNumber: 2 intervalMinute: 2 timeoutMinute: 1 request: durationInSecond: 2 qps: 2 perRequestTimeoutInMS: 1000 success: successRate: 1 meanAccessDelayInMs: 10000 EOF kubectl apply -f nethttp-test-agent.yaml a detail task to test spiderdoctor agent cat <<EOF > test-detail-agent.yaml apiVersion: spiderdoctor.spidernet.io/v1 kind: Nethttp metadata: name: test-detail-agent spec: schedule: startAfterMinute: 0 roundNumber: 2 intervalMinute: 2 timeoutMinute: 1 target: targetAgent: testIPv4: true testIPv6: true testEndpoint: true testMultusInterface: true testClusterIp: true testNodePort: true testLoadBalancer: true testIngress: true request: durationInSecond: 2 qps: 2 perRequestTimeoutInMS: 1000 success: successRate: 1 meanAccessDelayInMs: 10000 EOF kubectl apply -f test-detail-agent.yaml test custom URL cat <<EOF > test-custom.yaml apiVersion: spiderdoctor.spidernet.io/v1 kind: Nethttp metadata: name: test-custom spec: schedule: startAfterMinute: 0 roundNumber: 2 intervalMinute: 2 timeoutMinute: 1 target: targetUser: url: \"http://172.80.1.2\" method: \"GET\" request: durationInSecond: 10 qps: 10 perRequestTimeoutInMS: 1000 success: successRate: 1 meanAccessDelayInMs: 5000 EOF kubectl apply -f test-custom.yaml use the spicified spiderdoctor agents to send the http request cat <<EOF > source-agent.yaml apiVersion: spiderdoctor.spidernet.io/v1 kind: Nethttp metadata: name: source-agent spec: schedule: startAfterMinute: 0 roundNumber: 2 intervalMinute: 2 timeoutMinute: 1 sourceAgentNodeSelector: matchExpressions: - { key: \"kubernetes.io/hostname\", operator: In, values: [\"spiderdoctor-worker\"] } target: targetUser: url: \"http://172.80.1.2\" method: \"GET\" request: durationInSecond: 10 qps: 10 perRequestTimeoutInMS: 1000 success: successRate: 1 meanAccessDelayInMs: 1000 EOF kubectl apply -f source-agent.yaml test pod cat <<EOF > test-pod.yaml apiVersion: spiderdoctor.spidernet.io/v1 kind: Nethttp metadata: name: test-pod spec: schedule: startAfterMinute: 0 roundNumber: 2 intervalMinute: 2 timeoutMinute: 1 target: targetPod: podLabelSelector: matchExpressions: - { key: \"app\", operator: In, values: [\"test\"] } method: \"GET\" httpPort: 80 testIPv4: true testIPv6: true testMultusInterface: true request: durationInSecond: 2 qps: 2 perRequestTimeoutInMS: 1000 success: successRate: 1 meanAccessDelayInMs: 10000 EOF kubectl apply -f test-pod.yaml debug when something wrong happen, see the log for your task with following command #get log CRD_KIND=\"nethttp\" CRD_NAME=\"test1\" kubectl logs -n kube-system spiderdoctor-agent-v4vzx | grep -i \"${CRD_KIND}.${CRD_NAME}\" report when the spiderdoctor is not enabled to aggerate reports, all reports will be printed in the stdout of spiderdoctor agent. Use the following command to get its report kubectl logs -n kube-system spiderdoctor-agent-v4vzx | jq 'select( .TaskName==\"nethttp.testhttp1\" )' when the spiderdoctor is enabled to aggregate reports, all reports will be collected in the PVC or hostPath of spiderdoctor controller. metric introduction \"Metrics\": { \"latencies\": { \"total\": 27964545, \"mean\": 2796454, \"50th\": 2821970, \"90th\": 3102803, \"95th\": 3188759, \"99th\": 3188759, \"max\": 3188759, \"min\": 2362429 }, \"bytes_in\": { \"total\": 2357, \"mean\": 235.7 }, \"bytes_out\": { \"total\": 0, \"mean\": 0 }, \"earliest\": \"2022-11-18T04:55:20.22108713Z\", \"latest\": \"2022-11-18T04:55:24.721276724Z\", \"end\": \"2022-11-18T04:55:24.723858358Z\", \"duration\": 4500189594, \"wait\": 2581634, # Wait is the extra time waiting for responses from targets. \"requests\": 10, #the total number of requests executed \"rate\": 2.222128599500068, #Rate is the rate of sent requests per second. \"throughput\": 2.220854556815161, #Throughput is the rate of successful requests per second. \"success\": 1, #percentage of non-error responses \"status_codes\": { \"200\": 10 }, \"errors\": [] }","title":"Nethttp"},{"location":"usage/nethttp/#nethttp","text":"","title":"Nethttp"},{"location":"usage/nethttp/#concept","text":"Fo this kind task, each spiderdoctor agent will send http request to specified target, and get success rate and mean delay. It could specify success condition to tell the result succeed or fail. And, more detailed report will print to spiderdoctor agent stdout, or save to disc by spiderdoctor controller. the following is the spec of nethttp apiVersion: v1 items: - apiVersion: spiderdoctor.spidernet.io/v1 kind: Nethttp metadata: generation: 1 name: testhttp1 spec: schedule: intervalMinute: 2 roundNumber: 2 startAfterMinute: 0 timeoutMinute: 1 sourceAgentNodeSelector: matchExpressions: - { key: \"kubernetes.io/hostname\", operator: In, values: [\"spiderdoctor-worker\"] } request: durationInSecond: 5 perRequestTimeoutInMS: 1000 qps: 10 target: targetUser: method: GET url: http://172.80.1.2 targetPod: podLabelSelector: matchExpressions: - { key: \"app\", operator: In, values: [\"http-server\"] } httpPort: 80 method: GET testIPv4: true testIPv6: true testMultusInterface: false targetAgent: testClusterIp: true testEndpoint: true testIPv4: true testIPv6: true testIngress: false testMultusInterface: false testNodePort: true success: meanAccessDelayInMs: 10000 successRate: 1 status: doneRound: 1 expectedRound: 2 finish: false lastRoundStatus: succeed history: - deadLineTimeStamp: \"2022-11-21T06:19:53Z\" duration: 10.117152806s startTimeStamp: \"2022-11-21T06:18:53Z\" endTimeStamp: \"2022-11-21T06:19:03Z\" failedAgentNodeList: [] notReportAgentNodeList: [] roundNumber: 2 status: notstarted succeedAgentNodeList: [] spec.schedule: set how to schedule the task. roundNumber: how many rounds it should be to run this task intervalMinute: the time interval in minute, for run each round for this task startAfterMinute: when the start the first round timeoutMinute: the timeout in minute for each round, when the rask does not finish in time, it results to be failuire sourceAgentNodeSelector [optional]: set the node label selector, then, the spiderdoctor agent who locates on these nodes will implement the task. If not set this field, all spiderdoctor agent will execute the task spec.request: how each spiderdoctor agent should send the http request durationInSecond: for each round, the duration in second how long the http request lasts perRequestTimeoutInMS: timeout in ms for each http request qps: qps spec.target: set the target of http request. it could not set targetUser and targetAgent at the same time targetUser [optional]: set an user-defined URL for the http request url: the url for http method: http method, must be one of GET POST PUT DELETE CONNECT OPTIONS PATCH HEAD targetPod: [optional]: set pods for the http request podLabelSelector: select the target pods httpPort: http port method: http method testIPv4: test any IPv4 address. Notice, the 'enableIPv4' in configmap spiderdocter must be enabled testIPv6: test any IPv6 address. Notice, the 'enableIPv6' in configmap spiderdocter must be enabled testMultusInterface: whether send http request to all interfaces ip. targetAgent: [optional]: set the http tareget to spiderdoctor agents testClusterIp: send http request to the cluster ipv4 or ipv6 address of spiderdoctor agnent, according to testIPv4 and testIPv6. testEndpoint: send http request to other spiderdoctor agnent ipv4 or ipv6 address according to testIPv4 and testIPv6. testMultusInterface: whether send http request to all interfaces ip in testEndpoint case. testIPv4: test any IPv4 address. Notice, the 'enableIPv4' in configmap spiderdocter must be enabled testIPv6: test any IPv6 address. Notice, the 'enableIPv6' in configmap spiderdocter must be enabled testIngress: send http request to the ingress ipv4 or ipv6 address of spiderdoctor agnent testNodePort: send http request to the nodePort ipv4 or ipv6 address with each local node of spiderdoctor agnent , according to testIPv4 and testIPv6. >notice: when test targetAgent case, it will send http request to all targets at the same time with spec.request.qps for each one. That meaning, the actually QPS may be bigger than spec.request.qps spec.success: define the success condition of the task result meanAccessDelayInMs: mean access delay in MS, if the actual delay is bigger than this, it results to be failure successRate: the success rate of all http requests. Notice, when a http response code is >=200 and < 400, it's treated as success. if the actual whole success rate is smaller than successRate, the task results to be failure status: the status of the task doneRound: how many rounds have finished expectedRound: how many rounds the task expect finish: whether all rounds of this task have finished lastRoundStatus: the result of last round history: roundNumber: the round number status: the status of this round startTimeStamp: when this round begins endTimeStamp: when this round finally finished duration: how long the round spent deadLineTimeStamp: the time deadline of a round failedAgentNodeList: the node list where failed spiderdoctor agent locate notReportAgentNodeList: the node list where uknown spiderdoctor agent locate. This means these agents have problems. succeedAgentNodeList: the node list where successful spiderdoctor agent locate","title":"concept"},{"location":"usage/nethttp/#example","text":"a quick task to test spiderdoctor agent, to verify the whole network is ok, each agent could reach each other cat <<EOF > nethttp-test-agent.yaml apiVersion: spiderdoctor.spidernet.io/v1 kind: Nethttp metadata: name: test-agent spec: schedule: startAfterMinute: 0 roundNumber: 2 intervalMinute: 2 timeoutMinute: 1 request: durationInSecond: 2 qps: 2 perRequestTimeoutInMS: 1000 success: successRate: 1 meanAccessDelayInMs: 10000 EOF kubectl apply -f nethttp-test-agent.yaml a detail task to test spiderdoctor agent cat <<EOF > test-detail-agent.yaml apiVersion: spiderdoctor.spidernet.io/v1 kind: Nethttp metadata: name: test-detail-agent spec: schedule: startAfterMinute: 0 roundNumber: 2 intervalMinute: 2 timeoutMinute: 1 target: targetAgent: testIPv4: true testIPv6: true testEndpoint: true testMultusInterface: true testClusterIp: true testNodePort: true testLoadBalancer: true testIngress: true request: durationInSecond: 2 qps: 2 perRequestTimeoutInMS: 1000 success: successRate: 1 meanAccessDelayInMs: 10000 EOF kubectl apply -f test-detail-agent.yaml test custom URL cat <<EOF > test-custom.yaml apiVersion: spiderdoctor.spidernet.io/v1 kind: Nethttp metadata: name: test-custom spec: schedule: startAfterMinute: 0 roundNumber: 2 intervalMinute: 2 timeoutMinute: 1 target: targetUser: url: \"http://172.80.1.2\" method: \"GET\" request: durationInSecond: 10 qps: 10 perRequestTimeoutInMS: 1000 success: successRate: 1 meanAccessDelayInMs: 5000 EOF kubectl apply -f test-custom.yaml use the spicified spiderdoctor agents to send the http request cat <<EOF > source-agent.yaml apiVersion: spiderdoctor.spidernet.io/v1 kind: Nethttp metadata: name: source-agent spec: schedule: startAfterMinute: 0 roundNumber: 2 intervalMinute: 2 timeoutMinute: 1 sourceAgentNodeSelector: matchExpressions: - { key: \"kubernetes.io/hostname\", operator: In, values: [\"spiderdoctor-worker\"] } target: targetUser: url: \"http://172.80.1.2\" method: \"GET\" request: durationInSecond: 10 qps: 10 perRequestTimeoutInMS: 1000 success: successRate: 1 meanAccessDelayInMs: 1000 EOF kubectl apply -f source-agent.yaml test pod cat <<EOF > test-pod.yaml apiVersion: spiderdoctor.spidernet.io/v1 kind: Nethttp metadata: name: test-pod spec: schedule: startAfterMinute: 0 roundNumber: 2 intervalMinute: 2 timeoutMinute: 1 target: targetPod: podLabelSelector: matchExpressions: - { key: \"app\", operator: In, values: [\"test\"] } method: \"GET\" httpPort: 80 testIPv4: true testIPv6: true testMultusInterface: true request: durationInSecond: 2 qps: 2 perRequestTimeoutInMS: 1000 success: successRate: 1 meanAccessDelayInMs: 10000 EOF kubectl apply -f test-pod.yaml","title":"example"},{"location":"usage/nethttp/#debug","text":"when something wrong happen, see the log for your task with following command #get log CRD_KIND=\"nethttp\" CRD_NAME=\"test1\" kubectl logs -n kube-system spiderdoctor-agent-v4vzx | grep -i \"${CRD_KIND}.${CRD_NAME}\"","title":"debug"},{"location":"usage/nethttp/#report","text":"when the spiderdoctor is not enabled to aggerate reports, all reports will be printed in the stdout of spiderdoctor agent. Use the following command to get its report kubectl logs -n kube-system spiderdoctor-agent-v4vzx | jq 'select( .TaskName==\"nethttp.testhttp1\" )' when the spiderdoctor is enabled to aggregate reports, all reports will be collected in the PVC or hostPath of spiderdoctor controller. metric introduction \"Metrics\": { \"latencies\": { \"total\": 27964545, \"mean\": 2796454, \"50th\": 2821970, \"90th\": 3102803, \"95th\": 3188759, \"99th\": 3188759, \"max\": 3188759, \"min\": 2362429 }, \"bytes_in\": { \"total\": 2357, \"mean\": 235.7 }, \"bytes_out\": { \"total\": 0, \"mean\": 0 }, \"earliest\": \"2022-11-18T04:55:20.22108713Z\", \"latest\": \"2022-11-18T04:55:24.721276724Z\", \"end\": \"2022-11-18T04:55:24.723858358Z\", \"duration\": 4500189594, \"wait\": 2581634, # Wait is the extra time waiting for responses from targets. \"requests\": 10, #the total number of requests executed \"rate\": 2.222128599500068, #Rate is the rate of sent requests per second. \"throughput\": 2.220854556815161, #Throughput is the rate of successful requests per second. \"success\": 1, #percentage of non-error responses \"status_codes\": { \"200\": 10 }, \"errors\": [] }","title":"report"}]}